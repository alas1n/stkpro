{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getDatesBetweenDates","startDate","endDate","dates","theDate","moment","format","add","GetData","date","name","a","console","log","splitData","axios","get","then","response","data","substring","search","length","nameData","split","MineAndSortData","indexed_data","i","_data","parseInt","push","sort","b","UniqueData","UniquePrices","map","filter","x","indexOf","volumes","volume","j","App","useState","table","setTable","shownDate","setShownDate","rangeDate","setRangeDate","stokName","setStokName","className","placeholder","value","onChange","e","target","onClickSubmitButton","start","end","onClick","y","type","mode","layout","title","xaxis","tickangle","showticklabels","range","Math","min","max","undefined","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+VAaMA,G,MAAuB,SAACC,EAAWC,GAGvC,IAFA,IAAIC,EAAQ,GACRC,EAAUH,EAEZI,IAAOD,GAASE,OAAO,aAAeD,IAAOH,GAASI,OAAO,aAE7DH,EAAK,sBAAOA,GAAP,CAAcC,IACnBA,EAAUC,IAAOD,GAASG,IAAI,EAAG,OAEnC,OAAOJ,IAGHK,EAAO,uCAAG,WAAOC,EAAMC,GAAb,eAAAC,EAAA,6DACdC,QAAQC,IAAR,6DACwDH,EADxD,cACkED,IAE9DK,EAAY,GAJF,SAKRC,IACHC,IADG,iGAEwFN,EAFxF,cAEkGD,IAErGQ,MAAK,SAACC,GACL,IAAIC,EAAOD,EAASC,KAAKC,UACvBF,EAASC,KAAKE,OAAO,sBACrB,sBAAsBC,OACtBJ,EAASC,KAAKE,OAAO,wBAEnBE,EAAWL,EAASC,KAAKC,UAC3BF,EAASC,KAAKE,OAAO,sBACrB,qBAAqBC,OACrBJ,EAASC,KAAKE,OAAO,sBACrB,qBAAqBC,OACrB,IAEFV,QAAQC,IAAIU,GACZT,EAAYK,EAAKK,MAAM,QAvBb,gCAyBPV,GAzBO,2CAAH,wDA4BPW,EAAkB,SAACN,GAEvB,IADA,IAAIO,EAAe,GACVC,EAAI,EAAGA,GAAKR,EAAKG,OAAQK,GAAQ,EAAG,CAC3C,IAAIC,EAAQ,CACVC,SAASV,EAAKQ,GAAI,IAClBR,EAAKQ,EAAI,GACTE,SAASV,EAAKQ,EAAI,GAAI,IACtBE,SAASV,EAAKQ,EAAI,GAAI,KAExBD,EAAaI,KAAKF,GAKpB,OAHAF,EAAeA,EAAaK,MAAK,SAACpB,EAAGqB,GACnC,OAAOrB,EAAE,GAAKqB,EAAE,OAKdC,EAAa,SAACd,GAIlB,IAHA,IACMe,EADYf,EAAKgB,KAAI,SAAChB,GAAD,OAAUA,EAAK,MACXiB,QAAO,SAACC,EAAGV,EAAGhB,GAAP,OAAaA,EAAE2B,QAAQD,KAAOV,KAChEY,EAAU,GACLZ,EAAI,EAAGA,EAAIO,EAAaZ,OAAQK,IAAK,CAE5C,IADA,IAAIa,EAAS,EACJC,EAAI,EAAGA,EAAItB,EAAKG,OAAQmB,IAC3BP,EAAaP,KAAOR,EAAKsB,GAAG,KAC9BD,GAAkBrB,EAAKsB,GAAG,IAG9BF,EAAQT,KAAKU,GAGf,OADArB,EAAO,CAAC,YAAIe,GAAL,UAAwBK,KAqHlBG,EAjHH,WAAO,IAAD,EACUC,mBAAS,CAAC,CAAC,GAAI,CAAC,KAD1B,mBACTC,EADS,KACFC,EADE,OAEkBF,mBAAS,IAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGkBJ,mBAAS,IAH3B,mBAGTK,EAHS,KAGEC,EAHF,OAIgBN,mBAAS,IAJzB,mBAITO,EAJS,KAICC,EAJD,KAMhB,OACE,sBAAKC,UAAU,WAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,sBAAMA,UAAU,aAAhB,SACE,wBAAOA,UAAU,mBAAjB,wDAEE,uBACEA,UAAU,wBACVC,YAAa,mJACbC,MAAOJ,EACPK,SAAU,SAACC,GACTL,EAAYK,EAAEC,OAAOH,eAK7B,sBAAKF,UAAU,sBAAf,UACE,cAAC,IAAD,CACEM,oBAAmB,uCAAE,WAAOjD,GAAP,SAAAE,EAAA,sDACnBsC,EAAajD,EAAqBS,EAAKkD,MAAOlD,EAAKmD,MADhC,2CAAF,wDAIrB,oBAAIR,UAAU,oBAAd,uFAGJ,sBAAKA,UAAU,iBAAf,UACE,wBACEA,UAAU,eACVS,QAAS,WACPrD,EAAQ,WAAY,qBAAqBS,MAAK,SAACE,GAC7C0B,EAASZ,EAAWR,EAAgBN,SAJ1C,kBAUA,wBACEiC,UAAU,gBACVS,QAAS,WACPhB,EAAS,CAAC,CAAC,GAAI,CAAC,KAChBE,EAAa,KAJjB,sBAWF,cAAC,IAAD,CACEK,UAAU,OACVjC,KAAM,CACJ,CACEkB,EAAGO,EAAM,GAAGT,KAAI,SAACmB,GAAD,OAAWA,KAC3BQ,EAAGlB,EAAM,GAAGT,KAAI,SAACmB,GAAD,OAAWA,KAC3BS,KAAM,UACNC,KAAM,YAGVC,OAAQ,CACNC,MAAM,iGAAD,OAAwBpB,GAC7BqB,MAAO,CAELC,UAAW,GACXC,gBAAgB,EAChBC,MAAO,CAACC,KAAKC,IAAL,MAAAD,KAAI,YAAQ3B,EAAM,KAAM,IAAK2B,KAAKE,IAAL,MAAAF,KAAI,YAAQ3B,EAAM,KAAM,SAIlEA,EACC,cAAC,UAAD,CAASQ,UAAU,gBAAgBjC,KAAMyB,EAAzC,kGAGE8B,EACJ,qBAAKtB,UAAU,iBAAf,SACGJ,EAAUb,KAAI,SAAC1B,EAAMkE,GACpB,MACkC,QAA/BtE,IAAOI,GAAMH,OAAO,OACW,QAA/BD,IAAOI,GAAMH,OAAO,OAMnB,wBACE8C,UAAU,gBAEVS,QAAS,WACPrD,EACEH,IAAO2C,EAAU2B,IAAQrE,OAAO,YAChC4C,GACAjC,MAAK,SAACE,GACN0B,EAASZ,EAAWR,EAAgBN,QAEtC4B,EAAa1C,IAAOI,GAAMH,OAAO,iBAVrC,SAaGD,IAAOI,GAAMH,OAAO,gBAXhBG,QAeT,WCpLGmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7D,MAAK,YAAkD,IAA/C8D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c56ecd9b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { RangeDatePicker } from \"jalali-react-datepicker\";\nimport Plot from \"react-plotly.js\";\nimport axios from \"axios\";\nimport { CSVLink } from \"react-csv\";\nimport moment from \"moment-jalaali\";\n// import express from \"express\";\n\n// var app = express();\n// app.use(cors());\n\nimport \"./App.css\";\n\nconst getDatesBetweenDates = (startDate, endDate) => {\n  let dates = [];\n  var theDate = startDate;\n  while (\n    moment(theDate).format(\"YYYYMMDD\") <= moment(endDate).format(\"YYYYMMDD\")\n  ) {\n    dates = [...dates, theDate];\n    theDate = moment(theDate).add(1, \"day\");\n  }\n  return dates;\n};\n\nconst GetData = async (date, name) => {\n  console.log(\n    `http://cdn.tsetmc.com/Loader.aspx?ParTree=15131P&i=${name}&d=${date}`\n  );\n  let splitData = [];\n  await axios\n    .get(\n      `https://cors-anywhere.herokuapp.com/http://cdn.tsetmc.com/Loader.aspx?ParTree=15131P&i=${name}&d=${date}`\n    )\n    .then((response) => {\n      let data = response.data.substring(\n        response.data.search(\"var IntraTradeData\") +\n        \"var IntraTradeData=\".length,\n        response.data.search(\"var ShareHolderData\")\n      );\n      let nameData = response.data.substring(\n        response.data.search(\"var InstSimpleData\") +\n        \"var InstSimpleData\".length,\n        response.data.search(\"var InstSimpleData\") +\n        \"var InstSimpleData\".length +\n        20\n      );\n      console.log(nameData);\n      splitData = data.split(\"'\");\n    });\n  return splitData;\n};\n\nconst MineAndSortData = (data) => {\n  let indexed_data = [];\n  for (var i = 1; i <= data.length; i = i + 8) {\n    var _data = [\n      parseInt(data[i], 10),\n      data[i + 2],\n      parseInt(data[i + 4], 10),\n      parseInt(data[i + 6], 10),\n    ];\n    indexed_data.push(_data);\n  }\n  indexed_data = indexed_data.sort((a, b) => {\n    return a[3] - b[3];\n  });\n  return indexed_data;\n};\n\nconst UniqueData = (data) => {\n  const allPrices = data.map((data) => data[3]);\n  const UniquePrices = allPrices.filter((x, i, a) => a.indexOf(x) === i);\n  let volumes = [];\n  for (let i = 0; i < UniquePrices.length; i++) {\n    let volume = 0;\n    for (let j = 0; j < data.length; j++) {\n      if (UniquePrices[i] === data[j][3]) {\n        volume = volume + data[j][2];\n      }\n    }\n    volumes.push(volume);\n  }\n  data = [[...UniquePrices], [...volumes]];\n  return data;\n};\n\nconst App = () => {\n  const [table, setTable] = useState([[0], [0]]);\n  const [shownDate, setShownDate] = useState(\"\");\n  const [rangeDate, setRangeDate] = useState([]);\n  const [stokName, setStokName] = useState(\"\");\n\n  return (\n    <div className=\"view-div\">\n      <header className=\"header-div\">\n        <form className=\"input-form\">\n          <label className=\"input-form_label\">\n            نام سهام\n            <input\n              className=\"input-form_input-name\"\n              placeholder={\"کد مربوط به سهام را وارد کنید\"}\n              value={stokName}\n              onChange={(e) => {\n                setStokName(e.target.value);\n              }}\n            ></input>\n          </label>\n        </form>\n        <div className=\"date-picekr-wrapper\">\n          <RangeDatePicker\n            onClickSubmitButton={async (date) => {\n              setRangeDate(getDatesBetweenDates(date.start, date.end));\n            }}\n          />\n          <h1 className=\"date-picker-text \">انتخاب تاریخ</h1>\n        </div>\n      </header>\n      <div className=\"button-wrapper\">\n        <button\n          className=\"button-class\"\n          onClick={() => {\n            GetData(\"20201201\", \"20024911381434086\").then((data) => {\n              setTable(UniqueData(MineAndSortData(data)));\n            });\n          }}\n        >\n          test\n        </button>\n        <button\n          className=\"button-class \"\n          onClick={() => {\n            setTable([[0], [0]]);\n            setShownDate(\"\");\n            // console.log(table);\n          }}\n        >\n          clear\n        </button>\n      </div>\n      <Plot\n        className=\"plot\"\n        data={[\n          {\n            x: table[0].map((value) => value),\n            y: table[1].map((value) => value),\n            type: \"scatter\",\n            mode: \"markers\",\n          },\n        ]}\n        layout={{\n          title: `نمودار حجم قیمت در ${shownDate}`,\n          xaxis: {\n            // type: \"multicategory\",\n            tickangle: 35,\n            showticklabels: true,\n            range: [Math.min(...table[0]) - 100, Math.max(...table[0]) + 100],\n          },\n        }}\n      />\n      {table ? (\n        <CSVLink className=\"download-data\" data={table}>\n          دریافت اطلاعات\n        </CSVLink>\n      ) : undefined}\n      <div className=\"button-wrapper\">\n        {rangeDate.map((date, index) => {\n          if (\n            (moment(date).format(\"ddd\") !== \"Fri\") &\n            (moment(date).format(\"ddd\") !== \"Thu\")\n          ) {\n            {\n              /* console.log(moment(date).format(\"ddd\")); */\n            }\n            return (\n              <button\n                className=\"button-class \"\n                key={date}\n                onClick={() => {\n                  GetData(\n                    moment(rangeDate[index]).format(\"YYYYMMDD\"),\n                    stokName\n                  ).then((data) => {\n                    setTable(UniqueData(MineAndSortData(data)));\n                  });\n                  setShownDate(moment(date).format(\"jYYYY/jM/jD\"));\n                }}\n              >\n                {moment(date).format(\"jYYYY/jM/jD\")}\n              </button>\n            );\n          } else {\n            return undefined;\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}